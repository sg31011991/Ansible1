#Ansible Playbook to start service
-
  name: Patching for Linux Servers
  hosts: demo
  user: Admin1
  become: true
  connection: ssh
  vars:
    item:  zabbix-agent.service
  tasks:
    - name: Start Services
      service:
        name: '{{ item }}'
        enabled: no
        state: stopped
        #state: started
      #loop:
        #- httpd
    - name:  verify services processes are not running
      shell: if ps -eaf | egrep '{{ item }}'|grep -v grep > /dev/null ;then echo 'process_running';else echo 'process_not_running';fi
      ignore_errors: true
      register: app_process_check

    - name:  decision point to start patching if services stop
      fail: msg="{{ inventory_hostname }} have running Application. Please stop the application processes first, then attempt patching."
      when: app_process_check.stdout == "process_running"

    - name: upgrade kernel package on RHEL/CentOS server
      yum:
        name: "kernel"
        exclude: docker*,nfs-utils,dnsmasq
        state: latest
      when: app_process_check.stdout == "process_not_running" and ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      register: yum_update


    - name: Check if reboot required after kernel update on servers
      shell: KERNEL_NEW=$(rpm -q --last kernel |head -1 | awk '{print $1}' | sed 's/kernel-//'); KERNEL_NOW=$(uname -r); if [[ $KERNEL_NEW != $KERNEL_NOW ]]; then echo "reboot_needed"; else echo "reboot_not_needed"; fi
      when: ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux'
      ignore_errors: true
      register: reboot_required

    - name: Reboot CentOS/RedHat systems if kernel updated
      command: shutdown -r +1  "Rebooting CentOS/RedHat Servers After Kernel Patching"
      async: 0
      poll: 0
      when: reboot_required.stdout == "reboot_needed" and (ansible_distribution == 'CentOS' or ansible_distribution == 'Red Hat Enterprise Linux')
      register: reboot_started
      ignore_errors: true

    - name: Pause for 180 secs
      pause:
        minutes: 3

    - name: check if all the systems responding to ssh
      local_action:
       module: wait_for
          host={{ (ansible_ssh_host|default(ansible_host))|default(inventory_hostname) }}
          port=22
          search_regex=OpenSSH
          delay=15
          timeout=300
          state=started
